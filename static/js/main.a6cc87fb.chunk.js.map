{"version":3,"sources":["component/task-list/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskList","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","tasklist","JSON","parse","localStorage","getItem","task","state","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","Card","key","fluid","style","Content","Header","textAlign","wordWrap","className","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","splice","as","Form","this","Input","type","placeholder","Group","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6cc87fb.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Card, Header, Form, Input, Icon} from 'semantic-ui-react'\nimport \"./TaskList.css\";\n\nclass TaskList extends Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            task:\"\",\n            tasklist:[]\n        }\n\n    }\n\n    //on load get the task list\n    componentDidMount=()=>{\n        this.getTasks();\n    }\n\n    onChange = event=>{\n        this.setState({\n            [event.target.name]:event.target.value\n        })\n    }\n\n    //add task to list\n    onSubmit=()=>{\n        //get the task list from\n        let tasklist=JSON.parse(localStorage.getItem(\"tasklist\"))\n\n        //task list is null\n        if(tasklist==null){\n            tasklist=[]\n        }\n\n        //create task\n        let task={\n            task: `${this.state.task}`,\n            status:false\n        }\n\n        //add the task to the task list\n        tasklist.push(task)\n\n        //save the task list in the local storage\n        localStorage.setItem(\"tasklist\",JSON.stringify(tasklist))\n\n        //clear the form\n        this.setState({task:\"\"});\n        \n        //refresh the tasks\n        this.getTasks();\n    }\n\n    getTasks=()=>{\n        //get the task list from the local storage\n\n        let tasklist= JSON.parse(localStorage.getItem(\"tasklist\"))\n\n        //check if the task list is empty\n        if(tasklist){\n            //sort all the tasks on the basis of status\n            //completetd task will move down\n\n            tasklist=tasklist.sort((a,b)=>{\n                if(a.status){\n                    return 1;\n                }\n                else if(b.status){\n                    return -1;\n                }\n                return 0;\n            })\n\n            //save task list\n            localStorage.setItem(\"tasklist\",JSON.stringify(tasklist))\n\n            //set the tasklist to the state\n            this.setState({\n                // default color\n                // Incomplete: yellow\n                // complete: green\n                tasklist: tasklist.map((item, index) => {\n                    let color = \"yellow\";\n                    let cardBackground = { background: \"white\" };\n                    let taskComplete = { textDecoration: \"none\" };\n  \n                    if (item.status) {\n                        color = \"green\";\n                        cardBackground.background = \"beige\";\n                        taskComplete[\"textDecoration\"] = \"line-through\";\n                    }\n                    return (\n                    <Card key={index} color={color} fluid style={cardBackground}>\n                        <Card.Content>\n                        <Card.Header textAlign=\"left\" style={taskComplete}>\n                            <div style={{ wordWrap: \"break-word\" }} className=\"content\">{item.task}</div>\n                        </Card.Header>\n        \n                        <Card.Meta textAlign=\"right\">\n                            \n                            <Icon\n                            link\n                            name=\"check circle\"\n                            color=\"green\"\n                            onClick={() => this.updateTask(index)}\n                            />\n                            <span style={{ paddingRight: 10 }} className=\"content\">Done</span>\n                            <Icon\n                            link\n                            name=\"undo\"\n                            color=\"yellow\"\n                            onClick={() => this.undoTask(index)}\n                            />\n                            <span style={{ paddingRight: 10 }} className=\"content\">Undo</span>\n                            <Icon\n                            link\n                            name=\"delete\"\n                            color=\"red\"\n                            onClick={() => this.deleteTask(index)}\n                            />\n                            <span style={{ paddingRight: 10 }} className=\"content\">Delete</span>\n                        </Card.Meta>\n                        </Card.Content>\n                    </Card>\n                    );\n                })\n            })\n        }\n    }\n\n    updateTask=index=>{\n        let tasklist=JSON.parse(localStorage.getItem(\"tasklist\"));\n        tasklist[index].status = true;\n        // save the updated task list\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n        // refresh the task list\n        this.getTasks();\n    }\n\n    undoTask = index => {\n        // get the task list from the local storage\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n        // change status to false\n        tasklist[index].status = false;\n        // save the updated task list\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n        // refresh the task list\n        this.getTasks();\n      };\n\n      deleteTask=index=>{\n          let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"))\n          tasklist.splice(index, 1)\n          localStorage.setItem(\"tasklist\",JSON.stringify(tasklist))\n          this.getTasks()\n      }\n\n      render() {\n        return (\n          <div>\n            <div>\n              <Header as=\"h1\">\n                <div className=\"app-header\">üìù My Tasks</div>{\" \"}\n              </Header>\n            </div>\n            <div className=\"app-form\">\n              <Form onSubmit={this.onSubmit}>\n                <Input\n                  type=\"text\"\n                  name=\"task\"\n                  onChange={this.onChange}\n                  value={this.state.task}\n                  fluid\n                  placeholder=\"task...\"\n                />\n              </Form>\n            </div>\n            <div>\n              <Card.Group>{this.state.tasklist}</Card.Group>\n            </div>\n          </div>\n        );\n      }\n\n}\n\nexport default TaskList;\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskList from './component/task-list/TaskList';\n\nfunction App() {\n  return (\n    <div>\n      <TaskList></TaskList>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}